# HG changeset patch
# User nicoamaro
# Date 1723682380 10800
#      Wed Aug 14 21:39:40 2024 -0300
# Branch 3.1
# Node ID 5be1cea4e5488527b6624b7f34fe44731f0d5f50
# Parent  13627b03ca25a1a98becf40e533b955615b13429
# EXP-Topic fix_multiple_external_links_handling_issue_2019
Fix handling of multiple external links in openpyxl

- Updated the ExternalLink class to support multiple file links using RelationshipList.
- Modified the read_external_link function to handle multiple relationships and remove duplicates.
- Updated the ExcelWriter class's _write_external_links method to write all file links.
- Adjusted test_write to check for multiple file links.
- Updated test_read_external_link to verify the correct number of file links and their targets.

diff --git a/openpyxl/workbook/external_link/external.py b/openpyxl/workbook/external_link/external.py
--- a/openpyxl/workbook/external_link/external.py
+++ b/openpyxl/workbook/external_link/external.py
@@ -15,7 +15,7 @@
 from openpyxl.descriptors.sequence import NestedSequence, ValueSequence
 
 from openpyxl.packaging.relationship import (
-    Relationship,
+    RelationshipList,
     get_rels_path,
     get_dependents
     )
@@ -144,7 +144,6 @@
 
 
 class ExternalLink(Serialisable):
-
     tagname = "externalLink"
 
     _id = None
@@ -153,7 +152,7 @@
     mime_type = "application/vnd.openxmlformats-officedocument.spreadsheetml.externalLink+xml"
 
     externalBook = Typed(expected_type=ExternalBook, allow_none=True)
-    file_link = Typed(expected_type=Relationship, allow_none=True) # link to external file
+    file_links = Typed(expected_type=RelationshipList)  # Use RelationshipList for multiple file links
 
     __elements__ = ('externalBook', )
 
@@ -164,7 +163,8 @@
                  extLst=None,
                 ):
         self.externalBook = externalBook
-        # ignore other items for the moment.
+        self.file_links = RelationshipList()  # Initialize as a RelationshipList
+
 
 
     def to_tree(self):
@@ -185,6 +185,17 @@
 
     link_path = get_rels_path(book_path)
     deps = get_dependents(archive, link_path)
-    book.file_link = deps[0]
+
+    # Handle multiple relationships using RelationshipList
+    book.file_links = deps  # Store all relationships
+
+    # Optionally, handle duplicates or select the appropriate one
+    # For example, you can remove duplicates based on the Target attribute
+    unique_links = {}
+    for rel in book.file_links:
+        unique_links[rel.Target] = rel
+
+    # Convert unique links back to a RelationshipList
+    book.file_links = RelationshipList(unique_links.values())
 
     return book
diff --git a/openpyxl/workbook/external_link/tests/test_external.py b/openpyxl/workbook/external_link/tests/test_external.py
--- a/openpyxl/workbook/external_link/tests/test_external.py
+++ b/openpyxl/workbook/external_link/tests/test_external.py
@@ -55,13 +55,13 @@
 
 
     def test_write(self, ExternalLink):
-        expected  = """
+        expected = """
         <externalLink
-          xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main">
+        xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main">
         </externalLink>
-         """
+        """
         link = ExternalLink()
-        link.file_link = Relationship(Target="somefile.xlsx", type="externalLink")
+        link.file_links.append(Relationship(Target="somefile.xlsx", type="externalLink"))
         xml = tostring(link.to_tree())
         diff = compare_xml(xml, expected)
         assert diff is None, diff
@@ -140,7 +140,10 @@
     rels = get_dependents(archive, ARC_WORKBOOK_RELS)
     rel = rels.get("rId4")
     book = read_external_link(archive, rel.Target)
-    assert book.file_link.Target == "book2.xlsx"
+    
+    # Check the number of file links and their targets
+    assert len(book.file_links) == 1
+    assert book.file_links[0].Target == "book2.xlsx"
 
 
 def test_write_workbook(datadir, tmpdir):
diff --git a/openpyxl/writer/excel.py b/openpyxl/writer/excel.py
--- a/openpyxl/writer/excel.py
+++ b/openpyxl/writer/excel.py
@@ -264,12 +264,15 @@
 
             xml = link.to_tree()
             self._archive.writestr(link.path[1:], tostring(xml))
+
+            # Create a RelationshipList and add all file_links
             rels = RelationshipList()
-            rels.append(link.file_link)
+            for file_link in link.file_links:
+                rels.append(file_link)
+
             self._archive.writestr(rels_path, tostring(rels.to_tree()))
             self.manifest.append(link)
 
-
     def save(self):
         """Write data into the archive."""
         self.write_data()
